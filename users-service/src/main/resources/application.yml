server:
  port: ${SERVER_PORT}

logging:
  appender: ${LOGGING_APPENDER}
  root:
    level: info
  gelf:
    url: ${LOGGING_APPENDER_URL}
    port: ${LOGGING_APPENDER_PORT}


spring:
  application:
    name: auth server
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URL}
  datasource:
    url: ${DATASOURCE_URL}
    username: ${DATASOURCE_USERNAME}
    password: ${DATASOURCE_PASSWORD}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        show_sql: false
        dialect: org.hibernate.dialect.PostgreSQLDialect
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVER}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      properties:
        acks: 1
        spring:
          json:
            add:
              type:
                headers: false

auth-server:
  url: ${JWT_ISSUER_URL}/oauth2

retry:
  max-attempts: 3
  max-delay: 100

kafka:
  topics:
    order-create: ${TOPIC_ORDER_CREATE}
    order-change-destination: ${TOPIC_CHANGE_DESTINATION}
    order-cancel: ${TOPIC_ORDER_CANCEL}

management:
  endpoints:
    web:
      exposure:
        include: health,prometheus
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true
