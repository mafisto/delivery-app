server:
  port: ${SERVER_PORT}

logging:
  appender: ${LOGGING_APPENDER}
  root:
    level: info
  gelf:
    url: ${LOGGING_APPENDER_URL}
    port: ${LOGGING_APPENDER_PORT}


spring:
  application:
    name: order service
  datasource:
    url: ${DATASOURCE_URL}
    username: ${DATASOURCE_USERNAME}
    password: ${DATASOURCE_PASSWORD}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        show_sql: false
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVER}
    consumer:
      group-id: "order-1"
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      auto-offset-reset: earliest
      properties:
        spring:
          json:
            trusted:
              packages: '*'
    admin:
      auto-create: true
  data:
    mongodb:
      host: ${MONGODB_HOST}
      port: ${MONGODB_PORT}
      database: ${MONGODB_DATABASE}
      username: ${MONGODB_USERNAME}
      password: ${MONGODB_PASSWORD}
      authentication-database: ${MONGODB_AUTH_DATABASE}

retry:
  max-attempts: 3
  max-delay: 100

kafka:
  topics:
    order-create: ${TOPIC_ORDER_CREATE}
    order-change-destination: ${TOPIC_CHANGE_DESTINATION}
    order-cancel: ${TOPIC_ORDER_CANCEL}
    order-change-status: ${TOPIC_CHANGE_STATUS}
    order-assign-courier: ${TOPIC_ASSIGN_COURIER}
    order-create-courier: ${TOPIC_CREATE_COURIER}
    order-change-location: ${TOPIC_CHANGE_LOCATION}

management:
  endpoints:
    web:
      exposure:
        include: health,prometheus
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true
